scilla_version 0

import BoolUtils

library DaoStake

(* Constants *)
let not_pause       = Uint32 0
let on_pause        = Uint32 1
let zero_128        = Uint128 0
let one_hundred_128 = Uint128 100
let zero_bn         = BNum 0
let zero_address    = 0x0000000000000000000000000000000000000000

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

let get_percent =
  fun (amount: Uint128) =>
  fun (percent: Uint128) =>
    let value = builtin div amount one_hundred_128 in
    builtin mul value percent

(* Error events *)
type Error =
  | CodeInsufficientAmount
  | CodeIsNotGZILContract
  | CodeIsNotVoteContract
  | CodePauseNotPause
  | CodeNotAuthorised
  | CodeBlocksEarly
  | LimitSelfBalance

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeInsufficientAmount   => Int32 -1
      | CodeIsNotGZILContract    => Int32 -2
      | CodeIsNotVoteContract    => Int32 -3
      | CodePauseNotPause        => Int32 -4
      | CodeNotAuthorised        => Int32 -5
      | CodeBlocksEarly          => Int32 -6
      | LimitSelfBalance         => Int32 -7
      end
    in
    { _exception : "Error"; code : result_code }

let option_uint128 = @option_value Uint128

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract DaoStake
(*  Parameters *)
(contract_owner: ByStr20,
 proxy_staking_contract: ByStr20,
 gzil_contract: ByStr20,
 default_ssn: ByStr20)

(* Mutable fields *)

(* State of contract pause. *)
field pause: Uint32 = not_pause
field max_gzil_reward: Uint128 = Uint128 10

field last_claim: BNum = zero_bn
field blocks_for_claim: BNum = BNum 1800
field vote_contract_address: ByStr20 = zero_address
field locked_balance: Uint128 = zero_128

field delegated: Uint128 = Uint128 0
field token_balance: Uint128 = Uint128 0
field donator: Map ByStr20 Uint128 = Emp ByStr20 Uint128

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

(* Checking contract on pause state. *)
procedure checkPause(expected: Uint32)
  curent_pause <- pause;
  is_eq = builtin eq expected curent_pause;
  match is_eq with
  | True =>
  | False =>
    err = CodePauseNotPause;
    ThrowError err
  end
end

procedure canClaim(current_block: BNum)
  for_claim <- blocks_for_claim;
  current_last_claim <- last_claim;

  difference = builtin bsub current_block current_last_claim;
  int_256_for_claim = builtin bsub for_claim zero_bn;
  is_can_claim = builtin lt int_256_for_claim difference;

  match is_can_claim with
  | False =>
    err = CodeBlocksEarly;
    ThrowError err
  | True =>
  end
end

procedure isGZILContract()
  is_zlp_sender = builtin eq gzil_contract _sender;

  match is_zlp_sender with
  | True =>
  | False =>
    err = CodeIsNotGZILContract;
    ThrowError err
  end
end

procedure isVoteContract()
  vote_addr <- vote_contract_address;

  is_vote_contract = builtin eq vote_addr _sender;

  match is_vote_contract with
  | True =>
  | False =>
    err = CodeIsNotVoteContract;
    ThrowError err
  end
end

procedure callTransfer(to: ByStr20, amount: Uint128)
  vote_contract <- vote_contract_address;

  msg_transfer = {
    _tag: "Transfer";
    _recipient: gzil_contract;
    _amount: zero_128;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure delegateStake(amount: Uint128)
  delegate_call = {
    _tag: "DelegateStake";
    _recipient: proxy_staking_contract;
    _amount: amount;
    ssnaddr: default_ssn
  };
  msgs = one_msg delegate_call;
  send msgs
end

(* Calling withdrawStake from stake contract. *)
procedure withdrawStakeRewards()
  withdraw_call = {
    _tag: "WithdrawStakeRewards";
    _recipient: proxy_staking_contract;
    _amount: Uint128 0;
    ssnaddr: default_ssn
  };
  msgs = one_msg withdraw_call;
  send msgs
end

procedure transferZIL(amount: Uint128, to: ByStr20)
  e = {
    _eventname : "TransferZILEvent";
    amount: amount;
    to: to
  };
  event e;

  msg = {
    _tag: "";
    _recipient: to;
    _amount: amount
  };

  msgs = one_msg msg;
  send msgs
end

(* Checking contract owner is _sender. *)
procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

transition SetBlocksForClaim(value: BNum)
  IsOwner;
  checkPause not_pause;

  old_state <- blocks_for_claim;

  blocks_for_claim := value;

  e = {
    _eventname: "BlocksForClaimChanged";
    old: old_state;
    new: value
  };
  event e
end

transition ChangePause()
  IsOwner;
  status <- pause;
  is_pause = builtin eq status on_pause;

  e = {
    _eventname: "PauseEvent";
    pause: is_pause
  };
  event e;

  match is_pause with
  | True =>
    pause := not_pause
  | False =>
    pause := on_pause
  end
end

transition ChangeMaxGZILReward(new_value: Uint128)
  IsOwner;
  checkPause not_pause;
  max_reward <- max_gzil_reward;

  e = {
    _eventname: "ChangeMaxGZILRewardEvent";
    old: max_reward;
    new: new_value
  };
  event e;

  max_gzil_reward := new_value
end

transition UpdateVoteContract(addr: ByStr20)
  IsOwner;
  checkPause not_pause;

  old_contract <- vote_contract_address;

  e = {
    _eventname: "VoteContractUpdateEvent";
    old: old_contract;
    new: addr
  };
  event e;

  vote_contract_address := addr
end

transition LockBalance(value: Uint128)
  checkPause not_pause;
  isVoteContract;

  self_balance <- _balance;
  self_locked_balance <- locked_balance;

  unlocked_balance = builtin sub self_balance self_locked_balance;
  is_limit = builtin lt unlocked_balance value;

  match is_limit with
  | True =>
    err = LimitSelfBalance;
    ThrowError err
  | False =>
    new_locked = builtin add self_locked_balance value;
    locked_balance := new_locked
  end
end

transition TranferLockBalance(value: Uint128, to: ByStr20)
  checkPause not_pause;
  isVoteContract;

  self_locked_balance <- locked_balance;

  is_limit = builtin lt self_locked_balance value;

  match is_limit with
  | True =>
    err = LimitSelfBalance;
    ThrowError err
  | False =>
    new_locked = builtin sub self_locked_balance value;
    locked_balance := new_locked;
    transferZIL value to
  end
end

transition UnlockBalance(amount: Uint128)
  checkPause not_pause;
  isVoteContract;

  self_locked_balance <- locked_balance;

  new_locked_balance = builtin sub self_locked_balance amount;

  locked_balance := new_locked_balance;
end

transition DEV_DEPOSIT()
  accept
end

transition Deposit()
  checkPause not_pause;
  delegated_amount <- delegated;
  some_last_deposit <- donator[_sender];

  is_zero = builtin eq _amount zero_128;
  new_delegated = builtin add delegated_amount _amount;
  last_deposit = option_uint128 zero_128 some_last_deposit;
  new_deposit = builtin add last_deposit _amount;

  match is_zero with
  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  | False =>
    accept;

    donator[_sender] := _amount;
    delegated := new_deposit;

    delegateStake _amount;

    e = {
      _eventname: "DepositEvent";
      deposited: _amount
    };
    event e
  end
end

transition Claim()
  checkPause not_pause;
  current_block <- & BLOCKNUMBER;

  canClaim current_block;
  withdrawStakeRewards;

  last_claim := current_block
end

transition SendGZILReward(to: ByStr20)
  checkPause not_pause;
  isVoteContract;

  self_token_balance <- token_balance;
  percent <- max_gzil_reward;

  amount = get_percent self_token_balance percent;
  is_zero = builtin eq amount zero_128;

  match is_zero with
  | True =>
    err = CodeInsufficientAmount;
    ThrowError err
  | False =>
    callTransfer to amount
  end
end

transition RecipientAcceptMint(minter: ByStr20, recipient: ByStr20, amount: Uint128)
  isGZILContract;

  (* Need check  recipient to eq this_address *)
  current_token_balance <- token_balance;
  new_token_balance = builtin add current_token_balance amount;

  token_balance := new_token_balance
end

(* DEV *)
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  (* Need check  recipient to eq this_address *)
  current_token_balance <- token_balance;
  new_token_balance = builtin add current_token_balance amount;

  token_balance := new_token_balance
end
(* DEV *)

transition AddFunds()
  accept
end

transition DelegateStakeSuccessCallBack(ssnaddr: ByStr20, amount: Uint128)
end

transition WithdrawStakeRewardsSuccessCallBack(ssnaddr: ByStr20, rewards: Uint128)
end
