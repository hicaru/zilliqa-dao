scilla_version 0

import BoolUtils

library DaoVote

(* Constants *)
let not_pause = Uint32 0
let on_pause  = Uint32 1
let zero_128  = Uint128 0

let one_msg = 
  fun (msg : Message) => 
  let nil_msg = Nil {Message} in
    Cons {Message} msg nil_msg

let option_value =
  tfun 'A =>
  fun (default: 'A) =>
  fun (opt_val: Option 'A) =>
    match opt_val with
    | Some v => v
    | None => default
    end

(* Cusstom ADT. ipfs, want ZIL amount, locked gZIL, yes, no *)
type Proposal =
  | Proposal of String Uint128 Uint128 Uint128 Uint128

type Operation =
  | Add
  | Sub

(* Error events *)
type Error =
  | CodeInsufficientAmount
  | CodeIsNotGZILContract
  | CodePauseNotPause
  | CodeNotAuthorised
  | CodeIsNotOwnerOrOperator
  | CodeProposalNotFound

let make_error =
  fun (result : Error) =>
    let result_code = 
      match result with
      | CodeInsufficientAmount   => Int32 -1
      | CodeIsNotGZILContract    => Int32 -2
      | CodePauseNotPause        => Int32 -3
      | CodeNotAuthorised        => Int32 -4
      | CodeIsNotOwnerOrOperator => Int32 -5
      | CodeProposalNotFound     => Int32 -6
      end
    in
    { _exception : "Error"; code : result_code }

let add_operation = Add
let sub_operation = Sub

let option_uint128 = @option_value Uint128

(***************************************************)
(*             The contract definition             *)
(***************************************************)
contract DaoVote
(*  Parameters *)
(contract_owner: ByStr20,
 gzil_contract: ByStr20,
 dao_stake: ByStr20)

(* Mutable fields *)
(* Minimal gZIL for create proposal. *)
field min_proposal_amount: Uint128 = Uint128 10000000000000000
(* Minimal gZIL for create vote. *)
field min_vote_amount: Uint128 = Uint128 1
(* State of contract pause. *)
field pause: Uint32 = not_pause
(* current_quorum is 0.1 * total_suplay *)
field current_quorum: Uint128 = Uint128 34394139733186605

field map_proposals: Map ByStr20 Proposal = Emp ByStr20 Proposal
field map_vote_power: Map ByStr20 (Map Uint32 Uint128) 
  = Emp ByStr20 (Map Uint32 Uint128)
field token_holders: Map ByStr20 Uint128 = Emp ByStr20 Uint128
field grant_amounts: Map ByStr20 Uint128 = Emp ByStr20 Uint128

field operators: Map ByStr20 ByStr20 = Emp ByStr20 ByStr20

(* Emit Errors *)
procedure ThrowError(err : Error)
  e = make_error err;
  throw e
end

(* Checking contract on pause state. *)
procedure checkPause(expected: Uint32)
  curent_pause <- pause;
  is_eq = builtin eq expected curent_pause;
  match is_eq with
  | True =>
  | False =>
    err = CodePauseNotPause;
    ThrowError err
  end
end

procedure isOwnerOrOperator(to: ByStr20)
  some_operator <- operators[to];

  is_operator = match some_operator with
    | None => False
    | Some operator =>
      builtin eq operator _sender
    end;

  is_owner = builtin eq to _sender;
  is_allow = orb is_operator is_owner;

  match is_allow with
  | True =>
  | False =>
    err = CodeIsNotOwnerOrOperator;
    ThrowError err
  end
end

procedure isGZILContract()
  is_zlp_sender = builtin eq gzil_contract _sender;

  match is_zlp_sender with
  | True =>
  | False =>
    err = CodeIsNotGZILContract;
    ThrowError err
  end
end

procedure updateTokenCount(operation: Operation, address: ByStr20, amount: Uint128)
  some_to_count <- token_holders[address];
  current_count = option_uint128 zero_128 some_to_count;

  match operation with
  | Add =>
    new_to_count = builtin add current_count amount;
    token_holders[address] := new_to_count
  | Sub =>
    is_insufficient = builtin lt current_count amount;
    match is_insufficient with
      | False => 
        new_to_count = builtin sub current_count amount;
        token_holders[address] := new_to_count
      | True =>
        err = CodeInsufficientAmount;
        ThrowError err
      end
  end
end

procedure addGZIL(from: ByStr20, amount: Uint128)
  isGZILContract;
  updateTokenCount add_operation from amount
end

procedure callTransfer(to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "Transfer";
    _recipient: gzil_contract;
    _amount: zero_128;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure SendZIL(to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "";
    _recipient: to;
    _amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

(* WARN: voter can vote more then one. *)
procedure addVotePower(proposal_owner: ByStr20, power: Uint128, variant: Bool)
  some_proposal <- map_proposals[proposal_owner];

  match some_proposal with
  | Some proposal =>
    match proposal with
    | Proposal ipfs amount gzil yes no =>
      match variant with
      | True =>
        new_yes = builtin add yes power;
        updated_proposal = Proposal ipfs amount gzil yes no;
        map_proposals[_sender] := updated_proposal
      | False =>
        new_yes = builtin add no power;
        updated_proposal = Proposal ipfs amount gzil yes no
      end
    end
  | None =>
    err = CodeProposalNotFound;
    ThrowError err
  end
end

procedure callTransferFrom(from: ByStr20, to: ByStr20, amount: Uint128)
  msg_transfer = {
    _tag: "TransferFrom";
    _recipient: gzil_contract;
    _amount: zero_128;
    from: from;
    to: to;
    amount: amount
  };
  msgs = one_msg msg_transfer;
  send msgs
end

procedure withdrawGZIL(to: ByStr20)
  some_balance <- token_holders[to];

  match some_balance with
  | Some balance =>
    updateTokenCount sub_operation to balance;
    callTransfer to balance
  | None =>
    err = CodeInsufficientAmount;
    ThrowError err
  end
end

(* Checking contract owner is _sender. *)
procedure IsOwner()
  is_owner = builtin eq contract_owner _sender;

  match is_owner with
  | True =>
  | False =>
    err = CodeNotAuthorised;
    ThrowError err
  end
end

(* transitions *)
transition SetMinGZIL(min_proposal: Uint128, min_vote: Uint128)
  IsOwner;

  old_min_proposal <- min_proposal_amount;
  old_min_vote <- min_vote_amount;

  min_proposal_amount := min_proposal;
  min_vote_amount := min_vote;

  e = {
    _eventname: "MinimalVoteGZILChanged";
    old_min_proposal: old_min_proposal;
    old_min_vote: old_min_vote;
    new_min_proposal: min_proposal;
    new_min_vote: min_vote
  };
  event e
end

transition ChangePause()
  IsOwner;
  status <- pause;
  is_pause = builtin eq status on_pause;

  e = {
    _eventname: "PauseEvent";
    pause: is_pause
  };
  event e;

  match is_pause with
  | True =>
    pause := not_pause
  | False =>
    pause := on_pause
  end
end

transition WithdrawTokens(to: ByStr20)
  isOwnerOrOperator to;
  withdrawGZIL to
end

transition WithdrawZIL()
  some_grant_amount <- grant_amounts[_sender];
  bal <- _balance;

  grant_amount = option_uint128 zero_128 some_grant_amount;
  is_lt = builtin lt bal grant_amount;

  match is_lt with
  | True =>
    new_amount = builtin sub grant_amount bal;

    grant_amounts[_sender] := new_amount;

    SendZIL _sender bal
  | False =>
    delete grant_amounts[_sender];
    SendZIL _sender grant_amount
  end
end

(* TODO: added transition change `min_proposal_amount` *)
(* TODO: added transition change `quorum` *)
(* TODO: added transition for remove proposal (onwer, admin) *)

transition AddProposal(ipfs: String, amount: Uint128)
  gzil <- min_proposal_amount;
  (* Add check the token_holders. *)
  callTransferFrom _sender _this_address gzil;
  
  new_proposal = Proposal ipfs amount gzil zero_128 zero_128;

  map_proposals[_sender] := new_proposal
end

(* TODO: add map proposal: voter *)
transition VoteProposal(proposal_owner: ByStr20, variant: Bool)
  some_voter <- token_holders[_sender];

  vote_power = option_uint128 zero_128 some_voter;

  addVotePower proposal_owner vote_power variant
end

transition EndVote(proposal_owner: ByStr20)
  some_proposal <- map_proposals[proposal_owner];
  quorum <- current_quorum;
  some_grant <- grant_amounts[proposal_owner];

  match some_proposal with
  | Some proposal =>
    match proposal with
    | Proposal ipfs amount gzil yes no =>
      sum = builtin add yes no;
      is_quorum = builtin lt quorum sum;
      is_confirm = builtin lt no yes;

      match is_quorum with
      | True =>
        match is_confirm with
        | True =>
          grant_amount = option_uint128 zero_128 some_grant;
          new_amount = builtin add grant_amount amount;
          grant_amounts[proposal_owner] := new_amount
        | False =>
        end;

        delete map_proposals[proposal_owner]
      | False =>
      end
    end
  | None =>
    err = CodeProposalNotFound;
    ThrowError err
  end
end
(* transitions *)

(* callbacks *)
transition RecipientAcceptTransfer(sender: ByStr20, recipient: ByStr20, amount: Uint128)
  addGZIL sender amount
end

transition RecipientAcceptTransferFrom(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
  addGZIL sender amount;
  operators[sender] := initiator
end

transition TransferFromSuccessCallBack(initiator: ByStr20, sender: ByStr20, recipient: ByStr20, amount: Uint128)
  addGZIL sender amount;
  operators[sender] := initiator
end

transition TransferSuccessCallBack(sender: ByStr20, recipient: ByStr20, amount: Uint128)
end
(* callbacks *)
